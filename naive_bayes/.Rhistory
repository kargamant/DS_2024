df <- read.csv("nbtrain.csv", sep=",")
View(df)
library(e1071)
library('e1071')
install.packages("e1071")
library('e1071')
train <- df[1:9010, ]
View(train)
test <- df-train
test <- df[9011:,]
test <- df[9011:end,]
nrows(df)
nrow(df)
test <- df[9011:nrow(df),]
cl <- naiveBayes(income ~ age + sex + educ, data=train, laplace=1)
cl
prediction <- predict(cl, test)
prediction
table(prediction, test)
prediction <- predict(cl, test, type='raw')
prediction
table(prediction, test)
cl <- naiveBayes(income ~ age + sex + educ, data=train, laplace=1, threshold=0.6)
cl
prediction <- predict(cl, test, type='raw')
prediction
cl <- naiveBayes(income ~ age + sex + educ, data=train, laplace=1)
cl
prediction <- predict(cl, test, type='raw')
prediction
source("~/DS/DS_2024/naive_bayes/naive_bayes.R", echo=TRUE)
install.packages("e1071")
table(prediction, test)
prediction
table(prediction)
prediction
score <- score(cl, type='auc', data=test)
library('bnlearn')
install.packages("bnlearn")
library('bnlearn')
score <- score(cl, type='auc', data=test)
prediction
cm <- table(test, prediction)
test["income"]
cm <- table(test["income"], prediction)
View(test)
cm <- table(test["income"], prediction)
cm <- table(unlist(test["income"]), prediction)
length(unlist(test["income"]))
length(prediction)
prediction(,1:1)
prediction[,1:1]
prediction[,]
prediction[1,]
prediction[1,]["10-50K"]
max(prediction[1,])
names(max(prediction[1,]))
name(max(prediction[1,]))
names(prediction[1,])
cat <- names(prediction[1,])
which.max(prediction[1,])
which.max(prediction[2,])
which.max(prediction[200,])
names(which.max(prediction[1,]))
names(which.max(prediction[1,]))[1]
labels <- sapply(1:1000, function(x) names(which.max(prediction[x,]))[1])
cm <- table(unlist(test["income"]), labels)
cm
confusionMatrix(cm)
install.packages("caret")
library('caret')
confusionMatrix(cm)
confusionMatrix(cm)
cm <- table(unlist(test["income"]), labels)
confusionMatrix(cm)
cm <- table(test["income"], labels)
cm <- table(unlist(test["income"]), labels)
confusionMatrix(cm)
install.packages("caTools")
library('caTools')
confusionMatrix(cm)
cm <- table(unlist(test["income"]), labels)
confusionMatrix(cm)
cm <- table(labels, unlist(test["income"]))
confusionMatrix(cm)
cm <- table(labels, as.factor(unlist(test["income"])))
confusionMatrix(cm)
cm <- table(as.factor(labels), as.factor(unlist(test["income"])))
confusionMatrix(cm)
cm <- table(labels, unlist(test["income"]))
confusionMatrix(cm)
confusionMatrix(labels, unlist(test["income"]))
confusionMatrix(as.factor(labels), as.factor(unlist(test["income"])))
cl <- naiveBayes(income ~ age + sex + educ, data=train, laplace=3)
cl
prediction <- predict(cl, test, type='raw')
prediction
labels <- sapply(1:1000, function(x) names(which.max(prediction[x,]))[1])
confusionMatrix(as.factor(labels), as.factor(unlist(test["income"])))
cl <- naiveBayes(income ~ age + sex + educ, data=train, laplace=3, threshold=0.2)
cl
prediction <- predict(cl, test, type='raw')
labels <- sapply(1:1000, function(x) names(which.max(prediction[x,]))[1])
confusionMatrix(as.factor(labels), as.factor(unlist(test["income"])))
cl <- naiveBayes(income ~ age + sex + educ, data=train, laplace=3, threshold=0.2)
cl
prediction <- predict(cl, test, type='raw')
prediction
labels <- sapply(1:1000, function(x) names(which.max(prediction[x,]))[1])
cm <- table(labels, unlist(test["income"]))
confusionMatrix(as.factor(labels), as.factor(unlist(test["income"])))
prediction <- predict(cl, train, type='raw')
prediction
labels <- sapply(1:1000, function(x) names(which.max(prediction[x,]))[1])
cl <- naiveBayes(income ~ age + sex + educ, data=train, laplace=3, threshold=0.2)
cl
prediction <- predict(cl, train, type='raw')
prediction
labels <- sapply(1:9010, function(x) names(which.max(prediction[x,]))[1])
confusionMatrix(as.factor(labels), as.factor(unlist(train["income"])))
cl <- naiveBayes(income ~ age + sex + educ, data=train, laplace=3, threshold=0.2)
cl
prediction <- predict(cl, test, type='raw')
prediction
labels <- sapply(1:nrow(test), function(x) names(which.max(prediction[x,]))[1])
confusionMatrix(as.factor(labels), as.factor(unlist(test["income"])))
cl <- naiveBayes(income ~ age + sex + educ, data=train)
cl
prediction <- predict(cl, test, type='raw')
prediction
labels <- sapply(1:nrow(test), function(x) names(which.max(prediction[x,]))[1])
confusionMatrix(as.factor(labels), as.factor(unlist(test["income"])))
confusionMatrix(as.factor(labels), as.factor(test["income"]))
labels <- sapply(1:nrow(test), function(x) names(which.max(prediction[x,])))
confusionMatrix(as.factor(labels), as.factor(unlist(test["income"])))
summary(df)
summary(df["income"])
summary(unlist(df["income"]))
summary(as.factor(unlist(df["income"])))
summary(as.factor(unlist(df[1:9010,]["income"])))
summary(as.factor(unlist(df[9011:10000,]["income"])))
cl <- naiveBayes(income ~ age + sex + educ, data=train)
cl
prediction <- predict(cl, test, type='raw')
prediction
prediction <- predict(cl, test, type='class')
prediction
confusionMatrix(as.factor(labels), as.factor(unlist(test["income"])))
cl <- naiveBayes(sex ~ age + educ + income, data=train)
cl
prediction <- predict(cl, test, type='class')
prediction
confusionMatrix(prediction)
confusionMatrix(as.factor(prediction), as.factor(unlist(test["sex"])))
males <- filter(train, sex == "M")
males <- filter(train, unlist(train["sex"]) == "M")
males
sex <- unlist(train["sex"])
males <- filter(train, sex == "M")
males
typeof(train)
sex <- unlist(df["sex"])
males <- filter(df, sex == "M")
males
sex <- as.factor(unlist(df["sex"]))
males <- filter(df, sex == "M")
males
train <- as.data.frame(train)
test <- as.data.frame(test)
males <- train[train$sex == "M"]
View(train)
train$sex
males <- train[train$sex == "M"]
males <- train[unlist(train["sex"]) == "M"]
train
names(train)
males <- train[unlist(train["sex"]) == "M",]
View(males)
females <- train[unlist(train["sex"]) == "F"]
females <- train[unlist(train["sex"]) == "F",]
View(females)
train_males <- sample(males, 3500)
length(males)
train_males <- sample_n(males, 3500)
train_males <- males[sample(nrow(males),3500),]
train_females <- females[sample(nrow(females),3500),]
View(train_females)
new_train <- rbind(train_males, train_females)
new_cl <- naiveBayes(sex ~ age + educ + income, data=new_train)
new_cl
new_prediction <- predict(new_cl, test, type='class')
confusionMatrix(as.factor(new_prediction), as.factor(unlist(test["sex"])))
train_males <- males[sample(nrow(males),3500),]
train_females <- females[sample(nrow(females),3500),]
new_train <- rbind(train_males, train_females)
new_cl <- naiveBayes(sex ~ age + educ + income, data=new_train)
new_cl
new_prediction <- predict(new_cl, test, type='class')
confusionMatrix(as.factor(new_prediction), as.factor(unlist(test["sex"])))
new_cl
train_males <- males[sample(nrow(males),3500),]
train_females <- females[sample(nrow(females),3500),]
new_train <- rbind(train_males, train_females)
new_cl <- naiveBayes(sex ~ age + educ + income, data=new_train)
new_cl
new_prediction <- predict(new_cl, test, type='class')
confusionMatrix(as.factor(new_prediction), as.factor(unlist(test["sex"])))
train_males <- males[sample(nrow(males),3500),]
train_females <- females[sample(nrow(females),3500),]
new_train <- rbind(train_males, train_females)
new_cl <- naiveBayes(sex ~ age + educ + income, data=new_train)
new_cl
new_prediction <- predict(new_cl, test, type='class')
confusionMatrix(as.factor(new_prediction), as.factor(unlist(test["sex"])))
confusionMatrix(as.factor(labels), as.factor(unlist(test["income"])))
confusionMatrix(as.factor(new_prediction), as.factor(unlist(test["sex"])))
cl <- naiveBayes(sex ~ age + educ + income, data=train)
cl
prediction <- predict(cl, test, type='class')
confusionMatrix(as.factor(prediction), as.factor(unlist(test["sex"])))
confusionMatrix(as.factor(new_prediction), as.factor(unlist(test["sex"])))
installed.packages()
remove.packages("bnlearn")
installed.packages()
confusionMatrix(as.factor(labels), as.factor(unlist(test["income"])))
df <- read.csv("nbtrain.csv", sep=",")
library('e1071')
library('caret')
library('caTools')
train <- df[1:9010, ]
test <- df[9011:nrow(df),]
cl <- naiveBayes(income ~ age + sex + educ, data=train)
cl
prediction <- predict(cl, test, type='class')
prediction
confusionMatrix(as.factor(labels), as.factor(unlist(test["income"])))
