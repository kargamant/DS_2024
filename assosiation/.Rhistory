matrix_based_plt <- plt +
geom_raster() +
labs(x="lhs", y="rhs", fill="confidence") +
theme(axis.text.x = element_blank(), axis.text.y = element_blank())
ggplotly(matrix_based_plt)
View(inspection)
ggsave("matrix_based_viz_conf_plt.png")
ggplotly(matrix_based_plt)
# 11524 rules
rules <- apriori(tr, parameter=list(supp=0.01, conf=0.5))
inspection <- inspect(rules)
plt <- ggplot(inspection, aes(
text=paste(unlist(inspection["lhs"]), unlist(inspection["rhs"]), sep="->"),
unlist(inspection["support"]),
unlist(inspection["lift"]), ))
scatter_plot <- plt + geom_point() + labs(x="support", y="lift")
ggplotly(scatter_plot)
rules <- apriori(tr, parameter=list(supp=0.01, conf=0.8))
rules <- sort(rules, by="lift")
inspection <- inspect(rules)
# 11524 rules
rules <- apriori(tr, parameter=list(supp=0.01, conf=0.5))
inspection <- inspect(rules)
plt <- ggplot(inspection, aes(
text=paste(unlist(inspection["lhs"]), unlist(inspection["rhs"]), sep="->"),
unlist(inspection["support"]),
unlist(inspection["lift"]), ))
scatter_plot <- plt + geom_point() + labs(x="support", y="lift")
ggplotly(scatter_plot)
plt <- ggplot(inspection, aes(
text=paste(unlist(inspection["lhs"]), unlist(inspection["rhs"]), sep="->"),
unlist(inspection["support"]),
unlist(inspection["lift"]), ),
colour=unlist(inspection["confidence"]))
scatter_plot <- plt + geom_point() + labs(x="support", y="lift")
ggplotly(scatter_plot)
plt <- ggplot(inspection, aes(
text=paste(unlist(inspection["lhs"]), unlist(inspection["rhs"]), sep="->"),
unlist(inspection["support"]),
unlist(inspection["lift"]),
colour=unlist(inspection["confidence"])),
)
scatter_plot <- plt + geom_point() + labs(x="support", y="lift")
ggplotly(scatter_plot)
plt <- ggplot(inspection, aes(
text=paste(unlist(inspection["lhs"]), unlist(inspection["rhs"]), sep="->"),
unlist(inspection["support"]),
unlist(inspection["lift"]),
colour=unlist(inspection["confidence"])),
)
scatter_plot <- plt + geom_point() + labs(x="support", y="lift", color="confidence")
ggplotly(scatter_plot)
ggsave("support_lift_plt.png")
rules <- apriori(tr, parameter=list(supp=0.01, conf=0.8))
rules <- sort(rules, by="lift")
inspection <- inspect(rules)
plt <- ggplot(inspection,
aes(
text=unlist(inspection["lift"]),
unlist(inspection["lhs"]),
unlist(inspection["rhs"]),
#colour = unlist(inspection["lift"]),
fill = unlist(inspection["lift"])
))
matrix_based_plt <- plt +
geom_raster() +
labs(x="lhs", y="rhs", fill="lift") +
theme(axis.text.x = element_blank(), axis.text.y = element_blank())
ggplotly(matrix_based_plt)
# 11524 rules
rules <- apriori(tr, parameter=list(supp=0.01, conf=0.5))
inspection <- inspect(rules)
plt <- ggplot(inspection, aes(
text=paste(unlist(inspection["lhs"]), unlist(inspection["rhs"]), sep="->"),
unlist(inspection["support"]),
unlist(inspection["confidence"]),
colour = unlist(inspection["lift"])))
scatter_plot <- plt + geom_point() + labs(x="support", y="confidence", color="lift")
ggplotly(scatter_plot)
ggsave("support_confidence_plt.png")
plt <- ggplot(inspection, aes(
text=paste(unlist(inspection["lhs"]), unlist(inspection["rhs"]), sep="->"),
unlist(inspection["support"]),
unlist(inspection["lift"]),
colour=unlist(inspection["confidence"])),
)
scatter_plot <- plt + geom_point() + labs(x="support", y="lift", color="confidence")
ggplotly(scatter_plot)
itemFrequencyPlot(tr, topN = 10, type="absolute")
ggplotly(scatter_plot)
rules <- apriori(tr, parameter=list(supp=0.01, conf=0.8))
rules <- sort(rules, by="lift")
inspection <- inspect(rules)
plt <- ggplot(inspection,
aes(
text=unlist(inspection["lift"]),
unlist(inspection["lhs"]),
unlist(inspection["rhs"]),
#colour = unlist(inspection["lift"]),
fill = unlist(inspection["lift"])
))
matrix_based_plt <- plt +
geom_raster() +
labs(x="lhs", y="rhs", fill="lift") +
theme(axis.text.x = element_blank(), axis.text.y = element_blank())
ggplotly(matrix_based_plt)
plt <- ggplot(inspection,
aes(
text=unlist(inspection["confidence"]),
unlist(inspection["lhs"]),
unlist(inspection["rhs"]),
#colour = unlist(inspection["lift"]),
fill = unlist(inspection["confidence"])
))
matrix_based_plt <- plt +
geom_raster() +
labs(x="lhs", y="rhs", fill="confidence") +
theme(axis.text.x = element_blank(), axis.text.y = element_blank())
ggplotly(matrix_based_plt)
install.packages("network")
rgraph(10, mode="graph", trob=0.5)
library(network)
rgraph(10, mode="graph", trob=0.5)
install.packages("sna")
library(sna)
install.packages("ggnet")
remove.packages("sna")
remove.packages("network")
install.packages(igraph)
install.packages("igraph")
library(igraph)
View(inspection)
lhs <- unlist(inspection["lhs"])
rhs <- unlist(inspection["rhs"])
matr <- matrix(c(lhs, rhs), nrow=40, ncol=40)
matr
data <- matrix(sample(0:2, 25, replace = TRUE), nrow = 5)
colnames(data) <- rownames(data) <- LETTERS[1:5]
data
matr <- matrix(0:1, nrow=40, ncol=40)
matr
rownames(matr) <- lhs
colnames(matr) <- rhs
matr
lhs <- unique(unlist(inspection["lhs"]))
rhs <- unique(unlist(inspection["rhs"]))
matr <- matrix(0:1, nrow=40, ncol=40)
rownames(matr) <- lhs
matr <- matrix(0:1, nrow=length(lhs), ncol=length(rhs))
rownames(matr) <- lhs
colnames(matr) <- rhs
matr
matr["{item15, item30, item49}"]
matr["{item15, item30, item49}",]
matr["{item15, item30, item49}", "{item15}"]
matr["{item15, item30, item49}", "{item15}"] <- 0
matr["{item15, item30, item49}", "{item15}"]
lhs <- unlist(inspection["lhs"])
rhs <- unlist(inspection["rhs"])
matr <- matrix(0:1, nrow=length(unique(lhs)), ncol=length(unique(rhs)))
lhs <- unlist(inspection["lhs"])
rhs <- unlist(inspection["rhs"])
matr <- matrix(0:1, nrow=length(unique(lhs)), ncol=length(unique(rhs)))
rownames(matr) <- unique(lhs)
colnames(matr) <- unique(rhs)
matr
matr <- matrix(0, nrow=length(unique(lhs)), ncol=length(unique(rhs)))
rownames(matr) <- unique(lhs)
colnames(matr) <- unique(rhs)
matr
sapply(1:40, function(i) matr[lhs[i], rhs[i]] <- 1)
matr
lhs
lhs[1]
names(lhs) <- lhs
lhs
lhs[1]
names(rhs) <- rhs
lhs["{item15, item30, item49}"]
match(c("a", "b", "b", "c"), c("b", "d", "g", "h"))
match(c("a", "b", "b", "c"), c("b", "d", "g", "b"))
match(c("a", "b", "b", "c"), c("b", "d", "a", "h"))
for (g in c(1:40)) {
matr[lhs[g], rhs[g]] <- 1
}
matr[rhs[1]]
matr[rhs[1],]
matr
matr["{item15, item30, item49}",]
network <- graph_from_adjacency_matrix(matr)
lhs <- unlist(inspection["lhs"])
rhs <- unlist(inspection["rhs"])
matr <- matrix(0, nrow=length(lhs), ncol=length(rhs))
rownames(matr) <- unique(lhs)
colnames(matr) <- unique(rhs)
names(lhs) <- lhs
names(rhs) <- rhs
for (g in c(1:40)) {
matr[lhs[g], rhs[g]] <- 1
}
lhs <- unlist(inspection["lhs"])
rhs <- unlist(inspection["rhs"])
matr <- matrix(0, nrow=length(lhs), ncol=length(rhs))
rownames(matr) <- unique(lhs)
colnames(matr) <- unique(rhs)
lhs <- unlist(inspection["lhs"])
rhs <- unlist(inspection["rhs"])
matr <- matrix(0, nrow=length(lhs), ncol=length(rhs))
rownames(matr) <- lhs
colnames(matr) <- rhs
names(lhs) <- lhs
names(rhs) <- rhs
for (g in c(1:40)) {
matr[lhs[g], rhs[g]] <- 1
}
network <- graph_from_adjacency_matrix(matr)
network
plot(network)
plot(network,
label.dist=10)
plot(network,
label.dist=100)
plot(network, layout=layout.kamada.kawai, vertex.color="green")
plot(network, vertex.labels=NA, layout=layout.kamada.kawai, vertex.color="green")
plot(network, vertex.labels=NA, layout=layout.kamada.kawai, vertex.color="green")
plot(network, vertex.labels=NA)
plot(network, vertex.label=NA, layout=layout.kamada.kawai, vertex.color="green")
network
View(network)
matr
network
E(network)
V(network)
vertecies <- c(lhs, rhs)
lhs <- unlist(inspection["lhs"])
rhs <- unlist(inspection["rhs"])
vertecies <- c(lhs, rhs)
matr <- matrix(0, nrow=length(vertecies), ncol=length(vertecies))
rownames(matr) <- vertecies
colnames(matr) <- vertecies
names(lhs) <- lhs
names(rhs) <- rhs
for (g in c(1:40)) {
matr[lhs[g], rhs[g]] <- 1
}
network <- graph_from_adjacency_matrix(matr)
plot(network, vertex.label=NA, layout=layout.kamada.kawai, vertex.color="green")
matr
network
E(network)
V(network)
E(network)
plot(network, vertex.label=NA, layout=layout.kamada.kawai, vertex.color="green")
plot(network, layout=layout.kamada.kawai, vertex.color="green")
vertex.label=NA,
plot(network, vertex.label=NA, layout=layout.kamada.kawai, vertex.color="green")
install.packages("visNetwork")
library(visNetwork)
visNetwork(vertecies, matr)
nodes <- data.frame(
lhs=lhs,
rhs=rhs
)
View(nodes)
visNetwork(nodes, matr)
visNetwork(nodes, as.data.frame(matr))
nodes <- data.frame(
id=vertecies
)
visNetwork(nodes, as.data.frame(matr))
nodes <- data.frame(
id=unique(vertecies)
)
visNetwork(nodes, as.data.frame(matr))
lhs <- unlist(inspection["lhs"])
rhs <- unlist(inspection["rhs"])
vertecies <- c(lhs, rhs)
matr <- matrix(0, nrow=length(unique(vertecies)), ncol=length(unique(vertecies)))
rownames(matr) <- unique(vertecies)
colnames(matr) <- unique(vertecies)
names(lhs) <- lhs
names(rhs) <- rhs
for (g in c(1:40)) {
matr[lhs[g], rhs[g]] <- 1
}
network <- graph_from_adjacency_matrix(matr)
plot(network, vertex.label=NA, layout=layout.kamada.kawai, vertex.color="green")
library(visNetwork)
nodes <- data.frame(
id=unique(vertecies)
)
visNetwork(nodes, as.data.frame(matr))
plot(network, vertex.label=NA, layout=layout.kamada.kawai, vertex.color="green")
plot(network, layout=layout.kamada.kawai, vertex.color="green")
plot(network, layout=layout.kamada.kawai, vertex.color="green", cex=0.5)
plot(network, layout=layout.kamada.kawai, vertex.color="green", cex=0.5)
plot(network, layout=layout.kamada.kawai, vertex.color="green", cex=0.1)
par(cex=0.5)
plot(network, layout=layout.kamada.kawai, vertex.color="green")
nodes <- data.frame(
id=unique(vertecies)
)
visNetwork(nodes, as.data.frame(matr))
vcount(network)
degree(network)
V(network)
typeof(V(network))
View(network)
# Prepare node and edge data
nodes <- data.frame(
id = 1:vcount(network),
label = V(network),
size = degree(network) * 3
)
# Prepare node and edge data
nodes <- data.frame(
id = 1:vcount(network),
label = vertecies,
size = degree(network) * 3
)
# Prepare node and edge data
nodes <- data.frame(
id = 1:vcount(network),
label = unique(vertecies),
size = degree(network) * 3
)
edges <- as_data_frame(network, what = "edges")
View(edges)
visNetwork(nodes, as.data.frame(matr))
visNetwork(nodes, edges)
# Prepare node and edge data
nodes <- data.frame(
id = 1:vcount(network),
label = 1:vcount(network),
size = degree(network) * 3
)
edges <- as_data_frame(network, what = "edges")
visNetwork(nodes, edges)
# Prepare node and edge data
nodes <- data.frame(
id = 1:vcount(network),
label = unique(vertecies),
size = degree(network) * 3
)
edges <- as_data_frame(network, what = "edges")
visNetwork(nodes, edges)
nodes["{item15, item30, item49}"]
nodes["{item15, item30, item49}",]
nodes["{item15, item30, item49}",]["id"]
edges["from"] <- sapply(edges["from"], function(from) nodes[from,]["id"])
edges["to"] <- sapply(edges["to"], function(to) nodes[to,]["id"])
visNetwork(nodes, edges)
graph <- visNetwork(nodes, edges)
htmltools::save_html(graph, "graph.html")
View(tr)
training <- tr[1:8000]
View(training)
test <- tr[-c(1:8000)]
View(test)
training_rules <- apriori(training, parameter=list(supp=0.01, conf=0.8))
test_rules <- apriori(test, parameter=list(supp=0.01, conf=0.8))
View(test_rules)
View(training_rules)
training_inspection <- inspect(training_rules)
test_inspection <- inspect(test_rules)
View(test_rules)
View(test_inspection)
View(training_inspection)
training_rules <- apriori(training, parameter=list(supp=0.01, conf=0.5))
test_rules <- apriori(test, parameter=list(supp=0.01, conf=0.5))
training_inspection <- inspect(training_rules)
test_inspection <- inspect(test_rules)
View(tr)
View(inspection)
View(df)
View(tr)
# most frequent item13
# largest transaction size 14
items(tr)
# most frequent item13
# largest transaction size 14
tr
# most frequent item13
# largest transaction size 14
show(tr)
# most frequent item13
# largest transaction size 14
summary(tr)
# most frequent item13
# largest transaction size 14
inspect(tr)
# most frequent item13
# largest transaction size 14
tr_vec <- inspect(tr)
tr_vec[10000]
typeof(tr_vec)
tr_vec
# most frequent item13
# largest transaction size 14
as(tr, "data.frame")
# most frequent item13
# largest transaction size 14
tr_df <- as(tr, "data.frame")
View(tr_df)
tr_df["size"] <- sapply(unlist(tr_df["items"]), function(itemset) length(itemset))
tr_df["size"] <- sapply(unlist(tr_df["items"]), function(itemset) length(split(itemset, sep=",")))
tr_df["size"] <- sapply(unlist(tr_df["items"]), function(itemset) length(strsplit(itemset, sep=",")))
tr_df["size"] <- sapply(unlist(tr_df["items"]), function(itemset) length(strsplit(itemset, split=",")))
tr_df["size"][1]
tr_df["items"][1]
unlist(tr_df["items"])[1]
strsplit(unlist(tr_df["items"])[1], split=",")
length(strsplit(unlist(tr_df["items"])[1], split=","))
size(strsplit(unlist(tr_df["items"])[1], split=","))
length(unlist(strsplit(unlist(tr_df["items"])[1], split=",")))
tr_df["size"] <- sapply(unlist(tr_df["items"]), function(itemset) length(unlist(strsplit(itemset, split=","))))
# 11524 rules
rules <- apriori(tr, parameter=list(supp=0.01, conf=0.5))
inspection <- inspect(rules)
View(inspection)
summary(tr)
rules <- apriori(tr, parameter=list(supp=0.01, conf=0))
inspect(rules)
plt <- ggplot(inspection,
aes(
text=unlist(inspection["lift"]),
unlist(inspection["lhs"]),
unlist(inspection["rhs"]),
#colour = unlist(inspection["lift"]),
fill = unlist(inspection["lift"])
))
library(ggplot2)
plt <- ggplot(inspection,
aes(
text=unlist(inspection["lift"]),
unlist(inspection["lhs"]),
unlist(inspection["rhs"]),
#colour = unlist(inspection["lift"]),
fill = unlist(inspection["lift"])
))
matrix_based_plt <- plt +
geom_raster() +
labs(x="lhs", y="rhs", fill="lift") +
theme(axis.text.x = element_blank(), axis.text.y = element_blank())
ggplotly(matrix_based_plt)
library(plotly)
ggplotly(matrix_based_plt)
# 11524 rules
rules <- apriori(tr, parameter=list(supp=0.01, conf=0.5))
inspection <- inspect(rules)
rules <- apriori(tr, parameter=list(supp=0.01, conf=0.8))
rules <- sort(rules, by="lift")
inspection <- inspect(rules)
plt <- ggplot(inspection,
aes(
text=unlist(inspection["lift"]),
unlist(inspection["lhs"]),
unlist(inspection["rhs"]),
#colour = unlist(inspection["lift"]),
fill = unlist(inspection["lift"])
))
matrix_based_plt <- plt +
geom_raster() +
labs(x="lhs", y="rhs", fill="lift") +
theme(axis.text.x = element_blank(), axis.text.y = element_blank())
ggplotly(matrix_based_plt)
plt <- ggplot(inspection,
aes(
text=unlist(inspection["confidence"]),
unlist(inspection["lhs"]),
unlist(inspection["rhs"]),
#colour = unlist(inspection["lift"]),
fill = unlist(inspection["confidence"])
))
matrix_based_plt <- plt +
geom_raster() +
labs(x="lhs", y="rhs", fill="confidence") +
theme(axis.text.x = element_blank(), axis.text.y = element_blank())
ggplotly(matrix_based_plt)
library(igraph)
lhs <- unlist(inspection["lhs"])
rhs <- unlist(inspection["rhs"])
vertecies <- c(lhs, rhs)
matr <- matrix(0, nrow=length(unique(vertecies)), ncol=length(unique(vertecies)))
rownames(matr) <- unique(vertecies)
colnames(matr) <- unique(vertecies)
names(lhs) <- lhs
names(rhs) <- rhs
for (g in c(1:40)) {
matr[lhs[g], rhs[g]] <- 1
}
network <- graph_from_adjacency_matrix(matr)
par(cex=0.5)
plot(network, layout=layout.kamada.kawai, vertex.color="green")
library(visNetwork)
# Prepare node and edge data
nodes <- data.frame(
id = 1:vcount(network),
label = unique(vertecies),
size = degree(network) * 3
)
edges <- as_data_frame(network, what = "edges")
edges["from"] <- sapply(edges["from"], function(from) nodes[from,]["id"])
edges["to"] <- sapply(edges["to"], function(to) nodes[to,]["id"])
graph <- visNetwork(nodes, edges)
graph
training <- tr[1:8000]
test <- tr[-c(1:8000)]
training_rules <- apriori(training, parameter=list(supp=0.01, conf=0.5))
test_rules <- apriori(test, parameter=list(supp=0.01, conf=0.5))
training_inspection <- inspect(training_rules)
test_inspection <- inspect(test_rules)
