df <- read.csv("survey.csv", sep=",")
View(df)
library(rpart)
train <- df[1:600,]
test <- df[601:nrow(df),]
library(rpart)
tree <- rpart(MYDEPV ~ Price + Income + Age, parms=c(split="information"))
tree <- rpart("MYDEPV ~ Price + Income + Age", parms=c(split="information"))
tree <- rpart(MYDEPV ~ Price + Income + Age, parms=c(split="information"), data=train)
printcp(tree)
tree <- rpart(MYDEPV ~ Price + Income + Age, parms=c(split="information"), data=train, nsplit=3)
tree <- rpart(MYDEPV ~ Price + Income + Age, parms=c(split="information"), data=train, method='split')
tree <- rpart(MYDEPV ~ Price + Income + Age, parms=c(split="information"), data=train, method='anova')
tree <- rpart(MYDEPV ~ Price + Income + Age, parms=c(split="information"), data=train, method='class')
tree <- rpart(MYDEPV ~ Price + Income + Age, parms=c(split="information"), data=train, method='class')
tree <- rpart(MYDEPV ~ Price + Income + Age, parms=c(split="information"), data=train, method=c('class'))
tree <- rpart(MYDEPV ~ Price + Income + Age, parms=c(split="information"), data=train, method='class')
tree <- rpart(MYDEPV ~ Price + Income + Age, data=train, method="class", parms=c(split="information"))
tree <- rpart(MYDEPV ~ Price + Income + Age, data=train, method="class")
printcp(tree)
tree <- rpart(MYDEPV ~ Price + Income + Age, data=train, method="class", split="information")
tree <- rpart(MYDEPV ~ Price + Income + Age, data=train, method="class", parms=c(split="information"))
tree <- rpart(MYDEPV ~ Price + Income + Age, data=train, method="class", parms=c(split="information",))
tree <- rpart(MYDEPV ~ Price + Income + Age, data=train, method="class", parms=c(split="information"))
tree <- rpart(MYDEPV ~ Price + Income + Age, data=train, method="class", parms=list(split="information"))
printcp(tree)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
install.packages("rattle", "rpart.plot")
install.packages("rpart.plot")
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(tree)
tree <- rpart(MYDEPV ~ Price + Income + Age, data=train, method="class", parms=list(split="information"), minsplit=3)
printcp(tree)
tree <- rpart(MYDEPV ~ Price + Income + Age, data=train, method="class", parms=list(split="information"), maxsplit=3)
tree <- rpart(MYDEPV ~ Price + Income + Age, data=train, method="class", parms=list(split="information"), minsplit=3)
printcp(tree)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(tree)
pr <- predict(tree, train)
confusionMatrix
library('caret')
library('caTools')
pr
pr <- predict(tree, train, type="class")
pr
confusionMatrix(as.factor(unlist(pr)), as.factor(unlist(train["MYDEPV"])))
library("ROCR")
install.packages("ROCR")
library("ROCR")
perf <- performance(pr, "tpr", "fpr")
pr <- predict(tree, train, type="class")
perf <- performance(pr, "tpr", "fpr")
pr <- predict(tree, train)
perf <- performance(pr, "tpr", "fpr")
pr <- predict(tree, train, type="class")
perf <- performance(pr, "tpr", "fpr")
pr <- predict(tree, train, type="raw")
pr <- predict(tree, train, type="class")
perf <- performance(pr, "tpr", "fpr")
perf <- performance(pr.obj, "tpr", "fpr")
pr <- predict(tree, train, type="class")
confusionMatrix(as.factor(unlist(pr)), as.factor(unlist(train["MYDEPV"])))
perf <- performance(prediction(pr), "tpr", "fpr")
prediction(pr)
prediction(unlist(pr))
prediction(c(pr))
pr <- predict(tree, train)
prediction(c(pr))
pr <- predict(tree, train, type="class")
confusionMatrix(as.factor(unlist(pr)), as.factor(unlist(train["MYDEPV"])))
prediction(pr, as.factor(unlist(train["MYDEPV"])))
pr
typeof(pr)
list(pr)
typeof(list(pr))
prediction(list(pr), as.factor(unlist(train["MYDEPV"])))
prediction(as.factor(pr), as.factor(unlist(train["MYDEPV"])))
pr <- predict(tree, train)
prediction(as.factor(pr), as.factor(unlist(train["MYDEPV"])))
prediction(pr, as.factor(unlist(train["MYDEPV"])))
pr <- predict(tree, train, type="vector")
pr
prediction(pr, as.factor(unlist(train["MYDEPV"])))
perf <- performance(prediction(pr), "tpr", "fpr")
perf <- performance(prediction(pr), labels=as.factor(unlist(train["MYDEPV"])), "tpr", "fpr")
probj <- prediction(pr, as.factor(unlist(train["MYDEPV"])))
perf <- performance(probj, "tpr", "fpr")
plot(perf)
pr <- predict(tree, train, type="vector")
confusionMatrix(as.factor(unlist(pr)), as.factor(unlist(train["MYDEPV"])))
pr <- predict(tree, train, type="vector")
pr
pr <- predict(tree, train, type="list")
pr <- predict(tree, train, type="prob")
pr
pr <- predict(tree, train, type="vector")
confusionMatrix(as.factor(pr), as.factor(unlist(train["MYDEPV"])))
pr <- predict(tree, train, type="prob")
pr
pr <- sapply(1:nrow(train), function(x) names(which.max(pr[x,])))
pr
as.factor(pr)
confusionMatrix(as.factor(pr), as.factor(unlist(train["MYDEPV"])))
pr <- predict(tree, train, type="class")
confusionMatrix(as.factor(unlist(pr)), as.factor(unlist(train["MYDEPV"])))
pr <- predict(tree, train, type="prob")
pr <- sapply(1:nrow(train), function(x) names(which.max(pr[x,])))
probj <- prediction(pr, as.factor(unlist(train["MYDEPV"])))
pr <- predict(tree, train, type="prob")
pr <- sapply(1:nrow(train), function(x) names(which.max(pr[x,])))
probj <- prediction(pr, as.factor(unlist(train["MYDEPV"])))
probj <- prediction(list(pr), as.factor(unlist(train["MYDEPV"])))
pr <- predict(tree, train, type="prob")
pr <- sapply(1:nrow(train), function(x) names(which.max(pr[x,])))
probj <- prediction(as.factor(pr), as.factor(unlist(train["MYDEPV"])))
pr <- predict(tree, train, type="vector")
labels <- unlist(train["MYDEPV"])
labels <- replace(labels, labels==0, 1)
labels <- unlist(train["MYDEPV"])
labels <- replace(labels, labels==1, 2)
labels
labels <- replace(labels, labels==0, 1)
confusionMatrix(as.factor(pr), as.factor(unlist(train["MYDEPV"])))
confusionMatrix(as.factor(pr), as.factor(labels))
confusionMatrix(as.factor(pr),  as.factor(unlist(train["MYDEPV"])))
pr <- predict(tree, train, type="class")
confusionMatrix(as.factor(pr),  as.factor(unlist(train["MYDEPV"])))
pr <- predict(tree, train, type="vector")
labels <- unlist(train["MYDEPV"])
labels <- replace(labels, labels==1, 2)
labels <- replace(labels, labels==0, 1)
probj <- prediction(as.factor(pr), as.factor(labels))
pr <- predict(tree, train, type="vector")
pr
probj <- prediction(pr, as.factor(labels))
pr <- predict(tree, train, type="vector")
labels <- unlist(train["MYDEPV"])
labels <- replace(labels, labels==1, 2)
labels <- replace(labels, labels==0, 1)
probj <- prediction(pr, as.factor(labels))
perf <- performance(probj, "tpr", "fpr")
plot(perf)
plot(perf)
perf
auc <- perfomance(probj, "auc")
perf <- performance(probj, "tpr", "fpr")
plot(perf)
auc <- perfomance(probj, "auc")
auc <- perfomance(probj, measure="auc")
auc <- performance(probj, measure="auc")
auc
View(auc)
auc["y.values"]
auc$y.values
auc@y.values
auc_curve <- performance(probj, measure="auc")
auc <- auc_curve@y.values[[1]]
auc
pr <- predict(tree, test, type="class")
confusionMatrix(as.factor(pr), as.factor(unlist(train["MYDEPV"])))
confusionMatrix(as.factor(unlist(pr)), as.factor(unlist(train["MYDEPV"])))
confusionMatrix(as.factor(unlist(pr)), as.factor(unlist(test["MYDEPV"])))
tree_gini <- rpart(MYDEPV ~ Price + Income + Age, data=train, method="class", parms=list(split="gini"), minsplit=3)
pr <- predict(tree_gini, train, type="class")
confusionMatrix(as.factor(unlist(pr)), as.factor(unlist(train["MYDEPV"])))
pr <- predict(tree_gini, train, type="class")
confusionMatrix(as.factor(unlist(pr)), as.factor(unlist(train["MYDEPV"])))
fancyRpartPlot(tree_gini)
pr <- predict(tree_gini, train, type="vector")
labels <- unlist(train["MYDEPV"])
labels <- replace(labels, labels==1, 2)
labels <- replace(labels, labels==0, 1)
probj <- prediction(pr, as.factor(labels))
perf <- performance(probj, "tpr", "fpr")
plot(perf)
auc <- auc_curve@y.values[[1]]
auc
pr <- predict(tree_gini, test, type="class")
confusionMatrix(as.factor(unlist(pr)), as.factor(unlist(test["MYDEPV"])))
tree_gini
tree
printcp(tree_gini)
prune(tree_gini, cp=0.03)
pruned_tree_gini <- prune(tree_gini, cp=0.03)
pruned_tree_gini
pr <- predict(pruned_tree_gini, train, type="class")
confusionMatrix(as.factor(unlist(pr)), as.factor(unlist(test["MYDEPV"])))
confusionMatrix(as.factor(unlist(pr)), as.factor(unlist(train["MYDEPV"])))
printcp(pruned_tree_gini)
printcp(tree_gini)
df <- read.csv("survey.csv", sep=",")
train <- df[1:600,]
test <- df[601:nrow(df),]
library(rpart)
tree <- rpart(MYDEPV ~ Price + Income + Age, data=train, method="class", parms=list(split="information"), minsplit=3)
printcp(tree)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(tree)
tree
pr <- predict(tree, train, type="class")
library('caret')
library('caTools')
confusionMatrix(as.factor(unlist(pr)), as.factor(unlist(train["MYDEPV"])))
pruned_tree_gini <- prune(tree_gini, cp=0.03)
confusionMatrix(as.factor(unlist(pr)), as.factor(unlist(train["MYDEPV"])))
